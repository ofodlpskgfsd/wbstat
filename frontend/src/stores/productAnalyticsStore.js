import { defineStore } from 'pinia';
import axios from 'axios';

const token = import.meta.env.VITE_WB_API_KEY;

function createReadableError(err) {
    if (err.response) {
        switch (err.response.status) {
            case 429: return new Error('‚è± –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            case 401: return new Error('üîí –ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á.');
            case 500: return new Error('üí• –°–µ—Ä–≤–µ—Ä Wildberries –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            default: return new Error(`üö® –û—à–∏–±–∫–∞ ${err.response.status}: ${err.response.statusText}`);
        }
    } else if (err.request) {
        return new Error('üì° –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.');
    } else {
        return new Error(err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
}

async function fetchAnalyticsAPI(params, retries = 3, delay = 1000) {
    for (let attempt = 1; attempt <= retries; attempt++) {
        try {
            const { data } = await axios.post(
                'https://seller-analytics-api.wildberries.ru/api/v2/nm-report/detail',
                params,
                {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': token,
                    },
                }
            );
            if (data.error) {
                throw new Error(data.errorText || '–û—à–∏–±–∫–∞ –æ—Ç Wildberries');
            }
            return data.data;
        } catch (err) {
            if (attempt === retries) throw createReadableError(err);
            await new Promise(res => setTimeout(res, delay * attempt));
        }
    }
}

export const useProductAnalyticsStore = defineStore('productAnalytics', {
    state: () => ({
        cards: [],
        isNextPage: false,
        isLoading: false,
        errorMessage: '',
        page: 1,
        isLoaded: false,
        lastParams: null,
    }),
    actions: {
        async fetchAnalytics(params, force = false) {
            console.log('[fetchAnalytics] –í—ã–∑–æ–≤ —Å params:', params, 'force:', force);

            const paramsString = JSON.stringify(params);
            const lastParamsString = JSON.stringify(this.lastParams);

            // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∫—Ä–æ–º–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Ç–æ force –Ω—É–∂–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ page
            const isSameParamsExceptPage = (() => {
                if (!this.lastParams) return false;
                const { page: lastPage, ...lastRest } = this.lastParams;
                const { page, ...currentRest } = params;
                return JSON.stringify(lastRest) === JSON.stringify(currentRest);
            })();

            // –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
            if (!force && isSameParamsExceptPage && params.page > 1) {
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
            } else if (!force && paramsString === lastParamsString) {
                console.log('[fetchAnalytics] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω');
                return;
            } else {
                // force –∏–ª–∏ –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å
                this.cards = [];
            }

            this.isLoading = true;
            this.errorMessage = '';

            try {
                const data = await fetchAnalyticsAPI(params);

                if (params.page && params.page > 1) {
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
                    this.cards = [...this.cards, ...(data.cards || [])];
                } else {
                    // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏ page=1
                    this.cards = data.cards || [];
                }

                this.isNextPage = data.isNextPage || false;
                this.page = data.page || params.page || 1;
                this.isLoaded = true;
                this.lastParams = { ...params };

                console.log('[fetchAnalytics] –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –≤—Å–µ–≥–æ cards:', this.cards.length);
            } catch (e) {
                this.errorMessage = e.message;
                // –ü—Ä–∏ –æ—à–∏–±–∫–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —á–∏—Å—Ç–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ
                this.isNextPage = false;
                this.isLoaded = false;
                console.error('[fetchAnalytics] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e.message);
            } finally {
                this.isLoading = false;
            }
        },

        clearCache() {
            console.log('[clearCache] –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å—Ç–æ—Ä–∞');
            this.cards = [];
            this.isNextPage = false;
            this.page = 1;
            this.isLoaded = false;
            this.errorMessage = '';
            this.lastParams = null;
        }
    }
});
